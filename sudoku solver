#include <iostream>
#include <vector>

#define SIZE 9 // Size of the Sudoku grid (9x9)

bool is_valid(const std::vector<std::vector<int>>& board, int row, int col, int num) {
    // Check the row
    for (int i = 0; i < SIZE; i++) {
        if (board[row][i] == num) {
            return false;
        }
    }

    // Check the column
    for (int i = 0; i < SIZE; i++) {
        if (board[i][col] == num) {
            return false;
        }
    }

    // Check the 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solve_sudoku(std::vector<std::vector<int>>& board) {
    int row = -1;
    int col = -1;
    bool empty = true;

    // Find an empty cell (denoted by 0)
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == 0) {
                row = i;
                col = j;
                empty = false;
                break;
            }
        }
        if (!empty) {
            break;
        }
    }

    // If there's no empty cell, the puzzle is solved
    if (empty) {
        return true;
    }

    // Try digits 1 to 9
    for (int num = 1; num <= SIZE; num++) {
        if (is_valid(board, row, col, num)) {
            board[row][col] = num;

            // Recursively try to solve the board
            if (solve_sudoku(board)) {
                return true;
            }

            // If placing num leads to an invalid state, reset and backtrack
            board[row][col] = 0;
        }
    }

    return false; // Backtrack if no valid number is found
}

void print_board(const std::vector<std::vector<int>>& board) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            std::cout << board[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

int main() {
    std::vector<std::vector<int>> board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solve_sudoku(board)) {
        std::cout << "Solved Sudoku Puzzle: \n";
        print_board(board);
    } else {
        std::cout << "No solution exists for the puzzle.\n";
    }

    return 0;
}
